name: Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        test-suite: [
          runner1-config-build,
          runner2-actions-execution,
          runner3-environment-setup,
          runner4-ui-welcome
        ]

    name: Test ${{ matrix.test-suite }} (${{ matrix.os }})

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.os != 'windows-latest'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'


      - name: Setup WSL2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: Vampire/setup-wsl@v5
        with:
          wsl-version: 2
          distribution: Ubuntu-22.04

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Update package lists
          sudo apt update
          
          # Install core development tools
          sudo apt install -y gcc g++ gdb ccache tmux python3 python3-pip
          
          # Install ARM cross-compilation toolchain
          sudo apt install -y gcc-arm-none-eabi gdb-multiarch
          
          # Install optional tools
          sudo apt install -y openocd gdbserver
          
          # Install virtual display for VSCode extension testing
          sudo apt install -y xvfb

      - name: Install system dependencies (Windows/WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          # Update package lists
          sudo apt update
          
          # Install core development tools
          sudo apt install -y gcc g++ gdb ccache tmux python3 python3-pip
          
          # Install ARM cross-compilation toolchain
          sudo apt install -y gcc-arm-none-eabi gdb-multiarch
          
          # Install optional tools
          sudo apt install -y openocd gdbserver
          
          # Install virtual display for VSCode extension testing
          sudo apt install -y xvfb
          
          # Install NSS libraries for Electron/VSCode extension testing
          sudo apt install -y libnss3 libnss3-dev libatk-bridge2.0-0 libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2 libgtk-3-0
      
      - name: Install JLink (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install J-Link from local package
          sudo dpkg -i ci-tools/JLink_Linux_V788g_x86_64.deb || sudo apt-get install -f -y
          
          # Add J-Link to PATH
          echo "/opt/SEGGER/JLink" >> $GITHUB_PATH

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install Homebrew packages
          brew install gcc gdb ccache tmux python3 arm-none-eabi-gcc openocd
          
          # Install J-Link from local package
          sudo installer -pkg ci-tools/JLink_MacOSX_V840_universal.pkg -target /
          
          # Add J-Link to PATH
          echo "/Applications/SEGGER/JLink" >> $GITHUB_PATH

      - name: Install node (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          # Unset npm_config_prefix to avoid conflicts with nvm
          unset npm_config_prefix

          # Download and install nvm:
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
          # in lieu of restarting the shell
          \. "$HOME/.nvm/nvm.sh"
          # Download and install Node.js:
          nvm install 22
          node --version
          npm --version
          # Add Node.js to PATH
          echo '. "$HOME/.nvm/nvm.sh"' >> ~/.bashrc

      - name: Install J-Link (Windows)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          # Install J-Link from local package
          ./ci-tools/JLink_Windows_V840_x86_64.exe /S
          /mnt/c/Program\ Files/SEGGER/JLink/JLinkGDBServerCLExe.exe --version || echo "J-Link: Version check (may fail normally)"

      - name: Setup Python virtual environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install --upgrade pip
          echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
          echo "$PWD/venv/bin" >> $GITHUB_PATH

      - name: Install Python packages (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            source venv/bin/activate
          fi
          python3 -m pip install --upgrade pip
          python3 -m pip install pyserial mavproxy

      - name: Verify tool installation (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          . $HOME/.nvm/nvm.sh
          echo "=== Tool Verification in WSL2 ==="
          python3 --version
          gcc --version | head -1
          g++ --version | head -1
          gdb --version | head -1
          arm-none-eabi-gcc --version | head -1
          ccache --version | head -1
          tmux -V
          openocd --version 2>&1 | head -1

          node --version
          npm --version

      - name: Verify tool installation (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            source venv/bin/activate
          fi
          echo "=== Tool Verification ==="
          python3 --version
          gcc --version | head -1
          g++ --version | head -1
          gdb --version | head -1
          arm-none-eabi-gcc --version | head -1
          ccache --version | head -1
          tmux -V
          openocd --version 2>&1 | head -1
          echo "=== J-Link Verification ==="
          which JLinkGDBServerCLExe || echo "JLinkGDBServerCLExe not in PATH"
          find /opt/SEGGER /Applications/SEGGER -name "JLinkGDBServerCLExe" 2>/dev/null || echo "J-Link: Manual path search"
          JLinkGDBServerCLExe -version 2>&1 | head -3 || echo "J-Link: Version check (may fail normally)"

      - name: Install npm dependencies (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          \. "$HOME/.nvm/nvm.sh"
          npm ci
      
      - name: Install webview dependencies (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          \. "$HOME/.nvm/nvm.sh"
          cd webview-ui && npm ci && cd ..
      
      - name: Compile TypeScript (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          \. "$HOME/.nvm/nvm.sh"
          npm run compile

      - name: Install npm dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: npm ci
      
      - name: Install webview dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: cd webview-ui && npm ci && cd ..
      
      - name: Compile TypeScript (Unix)
        if: matrix.os != 'windows-latest'
        run: npm run compile

      - name: Run test suite - ${{ matrix.test-suite }} (WSL2)
        if: matrix.os == 'windows-latest'
        shell: wsl-bash {0}
        run: |
          \. "$HOME/.nvm/nvm.sh"
          case "${{ matrix.test-suite }}" in
            "runner1-config-build")
              SUITES="apBuildConfig apBuildConfigPanel apToolsConfig taskProvider"
              ;;
            "runner2-actions-execution")
              SUITES="apActions apLaunch apProgramUtils"
              ;;
            "runner3-environment-setup")
              SUITES="apCloneArdupilot apEnvironmentValidator apConnectedDevices"
              ;;
            "runner4-ui-welcome")
              SUITES="apUIHooks apWelcomeItem apWelcomeProvider apLog"
              ;;
          esac
          
          for suite in $SUITES; do
            echo "Running test suite: $suite"
            xvfb-run -a npm run test:$suite
          done

      - name: Run test suite - ${{ matrix.test-suite }} (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          case "${{ matrix.test-suite }}" in
            "runner1-config-build")
              SUITES="apBuildConfig apBuildConfigPanel apToolsConfig taskProvider"
              ;;
            "runner2-actions-execution")
              SUITES="apActions apLaunch apProgramUtils"
              ;;
            "runner3-environment-setup")
              SUITES="apCloneArdupilot apEnvironmentValidator apConnectedDevices"
              ;;
            "runner4-ui-welcome")
              SUITES="apUIHooks apWelcomeItem apWelcomeProvider apLog"
              ;;
          esac
          
          for suite in $SUITES; do
            echo "Running test suite: $suite"
            if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
              xvfb-run -a npm run test:$suite
            else
              npm run test:$suite
            fi
          done

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}-${{ matrix.os }}
          path: |
            test-results/
            coverage/
            *.log
          retention-days: 30
