name: Manual Release

on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: Branch to release from
        required: true
        default: master
      release_type:
        description: Version bump type
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

concurrency:
  group: manual-release
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      HUSKY: 0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: |
          npm ci
          npm --prefix webview-ui ci

      - name: Build extension
        run: npm run compile

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        id: bump
        shell: bash
        run: |
          # Get current version to calculate new version with even minor
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Calculate new version based on release type, ensuring minor is always even
          case "${{ inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              # If new minor is odd, make it even
              if [ $((NEW_MINOR % 2)) -ne 0 ]; then
                NEW_MINOR=$((NEW_MINOR + 1))
              fi
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              # If current minor is odd, make it even and reset patch
              if [ $((NEW_MINOR % 2)) -ne 0 ]; then
                NEW_MINOR=$((NEW_MINOR + 1))
                NEW_PATCH=0
              else
                NEW_PATCH=$((PATCH + 1))
              fi
              ;;
          esac

          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          
          # Set the version and create tag in one commit
          npm version --no-git-tag-version $NEW_VERSION
          git add package.json
          git commit -m "release: v$NEW_VERSION"
          git tag "v$NEW_VERSION"

          NEW_TAG=$(git describe --tags --abbrev=0)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Push commit and tags
        run: |
          git push origin HEAD:${{ inputs.base_branch }}
          git push origin --tags

      - name: Package VSIX
        run: npx --yes @vscode/vsce package --out ardupilot-devenv.vsix

      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: npx --yes @vscode/vsce publish --packagePath ardupilot-devenv.vsix -p "$VSCE_PAT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.tag }}
          name: ${{ steps.bump.outputs.tag }}
          generate_release_notes: true
          files: |
            ardupilot-devenv.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


