{
  "name": "ardupilot-devenv",
  "displayName": "ardupilot-devenv",
  "description": "VS Code Developer environment creator for ardupilot project",
  "publisher": "ardupilot-org",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.63.0"
  },
  "icon": "images/icon.jpg",
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension",
  "license": "SEE LICENSE IN COPYING.txt",
  "bugs": {
    "url": "https://github.com/ardupilot/ardupilot_vscode_devenv/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ardupilot/ardupilot_vscode_devenv.git"
  },
  "homepage": "https://github.com/ardupilot/ardupilot_vscode_devenv/blob/master/README.md",
  "contributes": {
    "configuration": {
      "title": "Ardupilot",
      "properties": {
        "ardupilot.activeConfiguration": {
          "type": "string",
          "default": null,
          "description": "Currently active build configuration"
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "ardupilot",
        "required": [
          "configure",
          "target"
        ],
        "properties": {
          "configure": {
            "type": "string",
            "description": "Ardupilot board configuration"
          },
          "target": {
            "type": "string",
            "description": "Ardupilot binary target(s)"
          },
          "configureOptions": {
            "type": "string",
            "description": "waf configure option"
          },
          "buildOptions": {
            "type": "string",
            "description": "waf build option"
          },
          "waffile": {
            "type": "string",
            "description": "waf file location that can be omitted"
          },
          "buildBeforeUpload": {
            "type": "boolean",
            "description": "Whether to build before uploading"
          },
          "features": {
            "type": "array",
            "description": "List of features to enable or disable",
            "items": {
              "type": "string"
            }
          },
          "nm": {
            "type": "string",
            "description": "nm command to use for symbol lookup"
          },
          "target_output": {
            "type": "string",
            "description": "Target output directory"
          },
          "enableFeatureConfig": {
            "type": "boolean",
            "description": "Enable feature config"
          },
          "simVehicleCommand": {
            "type": "string",
            "description": "sim_vehicle.py command arguments for SITL builds",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ],
    "debuggers": [
      {
        "type": "apLaunch",
        "label": "ArduPilot Upload",
        "languages": [
          "cpp",
          "c"
        ],
        "configurationAttributes": {
          "launch": {
            "required": [
              "target"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of launch configuration (must be 'apLaunch')",
                "default": "apLaunch"
              },
              "request": {
                "type": "string",
                "description": "Request type, must be 'launch'",
                "default": "launch"
              },
              "name": {
                "type": "string",
                "description": "Name of the launch configuration"
              },
              "target": {
                "type": "string",
                "description": "Target to build (e.g., 'copter', 'plane', 'rover')"
              },
              "simVehicleCommand": {
                "type": "string",
                "description": "sim_vehicle.py command arguments for SITL builds"
              },
              "isSITL": {
                "type": "boolean",
                "description": "Whether the build is for SITL (Software In The Loop) simulation"
              },
              "waffile": {
                "type": "string",
                "description": "Path to waf build script"
              }
            }
          }
        }
      }
    ],
    "problemMatchers": [
      {
        "name": "apgcc",
        "source": "apgcc",
        "owner": "ardupilot-devenv",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "^\\W*(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ardupilot-devenv",
          "title": "Ardupilot DevEnv",
          "icon": "resources/icon_vscode.png"
        }
      ]
    },
    "views": {
      "ardupilot-devenv": [
        {
          "id": "apWelcome",
          "name": "Welcome",
          "type": "tree"
        },
        {
          "id": "apBuildConfig",
          "name": "Build Configurations"
        },
        {
          "id": "apActions",
          "name": "Actions",
          "type": "tree"
        },
        {
          "id": "connected-devices",
          "name": "Connected Devices",
          "type": "tree"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "apBuildConfig",
        "contents": "You don't have any build configurations yet.\n[New Build Configuration](command:apBuildConfig.addEntry)\n"
      },
      {
        "view": "connected-devices",
        "contents": "No USB devices connected.\n[Refresh Devices](command:connected-devices.refresh)\n"
      },
      {
        "view": "apActions",
        "contents": "No active configuration.\n\nYou need to create or select a build configuration first.\n[Create New Configuration](command:apBuildConfig.addEntry)\n[Select Configuration](command:apActions.configure)\n"
      }
    ],
    "commands": [
      {
        "command": "apBuildConfig.refreshEntry",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "apBuildConfig.addEntry",
        "title": "Add",
        "icon": "$(add)"
      },
      {
        "command": "apBuildConfig.editEntry",
        "title": "Edit",
        "icon": "$(edit)"
      },
      {
        "command": "apBuildConfig.deleteEntry",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "apBuildConfig.activate",
        "title": "Set as Active Configuration",
        "icon": "$(pass)"
      },
      {
        "command": "connected-devices.refresh",
        "title": "Refresh Connected Devices",
        "icon": "$(refresh)"
      },
      {
        "command": "apActions.refresh",
        "title": "Refresh Actions",
        "icon": "$(refresh)"
      },
      {
        "command": "apActions.configure",
        "title": "Select Active Configuration"
      },
      {
        "command": "apActions.build",
        "title": "Build Firmware",
        "icon": "$(tools)"
      },
      {
        "command": "apActions.debug",
        "title": "Debug Firmware",
        "icon": "$(bug)"
      },
      {
        "command": "apActions.upload",
        "title": "Upload Firmware",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "apActions.run",
        "title": "Run SITL Simulation",
        "icon": "$(run)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "apBuildConfig.refreshEntry",
          "when": "view == apBuildConfig",
          "group": "navigation"
        },
        {
          "command": "apBuildConfig.addEntry",
          "when": "view == apBuildConfig",
          "group": "navigation"
        },
        {
          "command": "connected-devices.refresh",
          "when": "view == connected-devices",
          "group": "navigation"
        },
        {
          "command": "apActions.refresh",
          "when": "view == apActions",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "apBuildConfig.editEntry",
          "when": "view == apBuildConfig",
          "group": "inline"
        },
        {
          "command": "apBuildConfig.deleteEntry",
          "when": "view == apBuildConfig",
          "group": "inline"
        },
        {
          "command": "apBuildConfig.activate",
          "when": "view == apBuildConfig && viewItem == apBuildConfig",
          "group": "inline"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "cd webview-ui && npm run build && cd .. && tsc -b",
    "watch": "tsc -b -w",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "package": "npm run compile && vsce package --out ardupilot-devenv.vsix",
    "test": "npm run compile && node ./out/test/runTest.js",
    "test:machine": "npm run compile && node ./out/test/runTest.js",
    "test:suite": "npm run compile && node scripts/run-test-suite.js",
    "test:coverage": "npm run compile && c8 --reporter=html --reporter=text --reporter=lcov node ./out/test/runTest.js",
    "test:coverage:text": "npm run compile && c8 --reporter=text node ./out/test/runTest.js",
    "test:coverage:html": "npm run compile && c8 --reporter=html node ./out/test/runTest.js",
    "test:coverage:lcov": "npm run compile && c8 --reporter=lcov node ./out/test/runTest.js",
    "coverage:open": "open coverage/index.html || xdg-open coverage/index.html || start coverage/index.html",
    "test:apActions": "npm run compile && node ./out/test/runTest.js --test-suite=apActions",
    "test:apBuildConfig": "npm run compile && node ./out/test/runTest.js --test-suite=apBuildConfig",
    "test:apBuildConfigPanel": "npm run compile && node ./out/test/runTest.js --test-suite=apBuildConfigPanel",
    "test:apCloneArdupilot": "npm run compile && node ./out/test/runTest.js --test-suite=apCloneArdupilot",
    "test:apConnectedDevices": "npm run compile && node ./out/test/runTest.js --test-suite=apConnectedDevices",
    "test:apEnvironmentValidator": "npm run compile && node ./out/test/runTest.js --test-suite=apEnvironmentValidator",
    "test:apLaunch": "npm run compile && node ./out/test/runTest.js --test-suite=apLaunch",
    "test:apLog": "npm run compile && node ./out/test/runTest.js --test-suite=apLog",
    "test:apProgramUtils": "npm run compile && node ./out/test/runTest.js --test-suite=apProgramUtils",
    "test:apToolsConfig": "npm run compile && node ./out/test/runTest.js --test-suite=apToolsConfig",
    "test:apUIHooks": "npm run compile && node ./out/test/runTest.js --test-suite=apUIHooks",
    "test:apWelcomeItem": "npm run compile && node ./out/test/runTest.js --test-suite=apWelcomeItem",
    "test:apWelcomeProvider": "npm run compile && node ./out/test/runTest.js --test-suite=apWelcomeProvider",
    "test:extension": "npm run compile && node ./out/test/runTest.js --test-suite=extension",
    "test:taskProvider": "npm run compile && node ./out/test/runTest.js --test-suite=taskProvider"
  },
  "devDependencies": {
    "@types/assert": "^1.5.11",
    "@types/mocha": "^10.0.10",
    "@types/node": "^22.15.0",
    "@types/sinon": "^17.0.4",
    "@types/source-map-support": "^0.5.10",
    "@types/vscode": "^1.45.0",
    "@typescript-eslint/eslint-plugin": "^8.26.1",
    "@typescript-eslint/parser": "^8.26.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "c8": "^10.1.2",
    "eslint": "^8.38.0",
    "nyc": "^17.1.0",
    "sinon": "^20.0.0",
    "typescript": "^4.0.2"
  },
  "dependencies": {
    "@vscode-elements/elements": "^1.7.1",
    "fast-glob": "^3.3.3",
    "simple-git": "^3.27.0",
    "source-map-support": "^0.5.21"
  },
  "extensionDependencies": [
    "marus25.cortex-debug",
    "ms-vscode.cpptools",
    "ms-python.python"
  ]
}
